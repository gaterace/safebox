// Copyright 2019-2022 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: MServiceSafebox.proto

package mservicesafebox

import (
	dml "github.com/gaterace/dml-go/pkg/dml"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MService tree node entity
type TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for an MService tree node
	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,7,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,8,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
}

func (x *TreeNode) Reset() {
	*x = TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeNode) ProtoMessage() {}

func (x *TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeNode.ProtoReflect.Descriptor instead.
func (*TreeNode) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{0}
}

func (x *TreeNode) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *TreeNode) GetCreated() *dml.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *TreeNode) GetModified() *dml.DateTime {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *TreeNode) GetDeleted() *dml.DateTime {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *TreeNode) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *TreeNode) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TreeNode) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *TreeNode) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

// MService data key entity
type DataKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,1,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,7,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,8,opt,name=data_key_name,json=dataKeyName,proto3" json:"data_key_name,omitempty"`
	// data key description
	DataKeyDescription string `protobuf:"bytes,9,opt,name=data_key_description,json=dataKeyDescription,proto3" json:"data_key_description,omitempty"`
	// encrypted data key
	DataKey []byte `protobuf:"bytes,10,opt,name=data_key,json=dataKey,proto3" json:"data_key,omitempty"`
}

func (x *DataKey) Reset() {
	*x = DataKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataKey) ProtoMessage() {}

func (x *DataKey) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataKey.ProtoReflect.Descriptor instead.
func (*DataKey) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{1}
}

func (x *DataKey) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

func (x *DataKey) GetCreated() *dml.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DataKey) GetModified() *dml.DateTime {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *DataKey) GetDeleted() *dml.DateTime {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *DataKey) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *DataKey) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DataKey) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *DataKey) GetDataKeyName() string {
	if x != nil {
		return x.DataKeyName
	}
	return ""
}

func (x *DataKey) GetDataKeyDescription() string {
	if x != nil {
		return x.DataKeyDescription
	}
	return ""
}

func (x *DataKey) GetDataKey() []byte {
	if x != nil {
		return x.DataKey
	}
	return nil
}

// MService key node entity
type KeyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified,proto3" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier for an MService tree node
	NodeId int64 `protobuf:"varint,7,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,8,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
	// is key node enabled?
	IsEnabled bool `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,10,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// key node description
	KeyDescription string `protobuf:"bytes,11,opt,name=key_description,json=keyDescription,proto3" json:"key_description,omitempty"`
	// key node value, encrypted if data_key_id non zero
	KeyValue []byte `protobuf:"bytes,12,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,13,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
}

func (x *KeyNode) Reset() {
	*x = KeyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyNode) ProtoMessage() {}

func (x *KeyNode) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyNode.ProtoReflect.Descriptor instead.
func (*KeyNode) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{2}
}

func (x *KeyNode) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *KeyNode) GetCreated() *dml.DateTime {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *KeyNode) GetModified() *dml.DateTime {
	if x != nil {
		return x.Modified
	}
	return nil
}

func (x *KeyNode) GetDeleted() *dml.DateTime {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *KeyNode) GetIsDeleted() bool {
	if x != nil {
		return x.IsDeleted
	}
	return false
}

func (x *KeyNode) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *KeyNode) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *KeyNode) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

func (x *KeyNode) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *KeyNode) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *KeyNode) GetKeyDescription() string {
	if x != nil {
		return x.KeyDescription
	}
	return ""
}

func (x *KeyNode) GetKeyValue() []byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *KeyNode) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

// request parameters for method add_shared_secret
type AddSharedSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// shared secret
	SharedSecret string `protobuf:"bytes,1,opt,name=shared_secret,json=sharedSecret,proto3" json:"shared_secret,omitempty"`
}

func (x *AddSharedSecretRequest) Reset() {
	*x = AddSharedSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSharedSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSharedSecretRequest) ProtoMessage() {}

func (x *AddSharedSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSharedSecretRequest.ProtoReflect.Descriptor instead.
func (*AddSharedSecretRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{3}
}

func (x *AddSharedSecretRequest) GetSharedSecret() string {
	if x != nil {
		return x.SharedSecret
	}
	return ""
}

// response parameters for method add_shared_secret
type AddSharedSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AddSharedSecretResponse) Reset() {
	*x = AddSharedSecretResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSharedSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSharedSecretResponse) ProtoMessage() {}

func (x *AddSharedSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSharedSecretResponse.ProtoReflect.Descriptor instead.
func (*AddSharedSecretResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{4}
}

func (x *AddSharedSecretResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *AddSharedSecretResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// request parameters for method clear_shared_secrets
type ClearSharedSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam,proto3" json:"dummy_param,omitempty"`
}

func (x *ClearSharedSecretsRequest) Reset() {
	*x = ClearSharedSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearSharedSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearSharedSecretsRequest) ProtoMessage() {}

func (x *ClearSharedSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearSharedSecretsRequest.ProtoReflect.Descriptor instead.
func (*ClearSharedSecretsRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{5}
}

func (x *ClearSharedSecretsRequest) GetDummyParam() int32 {
	if x != nil {
		return x.DummyParam
	}
	return 0
}

// response parameters for method clear_shared_secrets
type ClearSharedSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ClearSharedSecretsResponse) Reset() {
	*x = ClearSharedSecretsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearSharedSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearSharedSecretsResponse) ProtoMessage() {}

func (x *ClearSharedSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearSharedSecretsResponse.ProtoReflect.Descriptor instead.
func (*ClearSharedSecretsResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{6}
}

func (x *ClearSharedSecretsResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ClearSharedSecretsResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// request parameters for method create_data_key
type CreateDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName,proto3" json:"data_key_name,omitempty"`
	// data key description
	DataKeyDescription string `protobuf:"bytes,3,opt,name=data_key_description,json=dataKeyDescription,proto3" json:"data_key_description,omitempty"`
}

func (x *CreateDataKeyRequest) Reset() {
	*x = CreateDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataKeyRequest) ProtoMessage() {}

func (x *CreateDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataKeyRequest.ProtoReflect.Descriptor instead.
func (*CreateDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDataKeyRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateDataKeyRequest) GetDataKeyName() string {
	if x != nil {
		return x.DataKeyName
	}
	return ""
}

func (x *CreateDataKeyRequest) GetDataKeyDescription() string {
	if x != nil {
		return x.DataKeyDescription
	}
	return ""
}

// response parameters for method create_data_key
type CreateDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,4,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
}

func (x *CreateDataKeyResponse) Reset() {
	*x = CreateDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDataKeyResponse) ProtoMessage() {}

func (x *CreateDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDataKeyResponse.ProtoReflect.Descriptor instead.
func (*CreateDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{8}
}

func (x *CreateDataKeyResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateDataKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateDataKeyResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateDataKeyResponse) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

// request parameters for method delete_data_key
type DeleteDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,2,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteDataKeyRequest) Reset() {
	*x = DeleteDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataKeyRequest) ProtoMessage() {}

func (x *DeleteDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteDataKeyRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *DeleteDataKeyRequest) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

func (x *DeleteDataKeyRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// response parameters for method delete_data_key
type DeleteDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteDataKeyResponse) Reset() {
	*x = DeleteDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataKeyResponse) ProtoMessage() {}

func (x *DeleteDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDataKeyResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DeleteDataKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DeleteDataKeyResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// request parameters for method get_data_key
type GetDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName,proto3" json:"data_key_name,omitempty"`
}

func (x *GetDataKeyRequest) Reset() {
	*x = GetDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyRequest) ProtoMessage() {}

func (x *GetDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyRequest.ProtoReflect.Descriptor instead.
func (*GetDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{11}
}

func (x *GetDataKeyRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetDataKeyRequest) GetDataKeyName() string {
	if x != nil {
		return x.DataKeyName
	}
	return ""
}

// response parameters for method get_data_key
type GetDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// data key object
	Datakey *DataKey `protobuf:"bytes,3,opt,name=datakey,proto3" json:"datakey,omitempty"`
}

func (x *GetDataKeyResponse) Reset() {
	*x = GetDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyResponse) ProtoMessage() {}

func (x *GetDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyResponse.ProtoReflect.Descriptor instead.
func (*GetDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{12}
}

func (x *GetDataKeyResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDataKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetDataKeyResponse) GetDatakey() *DataKey {
	if x != nil {
		return x.Datakey
	}
	return nil
}

// request parameters for method get_data_key_by_id
type GetDataKeyByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,2,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
}

func (x *GetDataKeyByIdRequest) Reset() {
	*x = GetDataKeyByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyByIdRequest) ProtoMessage() {}

func (x *GetDataKeyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetDataKeyByIdRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{13}
}

func (x *GetDataKeyByIdRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetDataKeyByIdRequest) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

// response parameters for method get_data_key_by_id
type GetDataKeyByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// data key object
	Datakey *DataKey `protobuf:"bytes,3,opt,name=datakey,proto3" json:"datakey,omitempty"`
}

func (x *GetDataKeyByIdResponse) Reset() {
	*x = GetDataKeyByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeyByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeyByIdResponse) ProtoMessage() {}

func (x *GetDataKeyByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeyByIdResponse.ProtoReflect.Descriptor instead.
func (*GetDataKeyByIdResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{14}
}

func (x *GetDataKeyByIdResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDataKeyByIdResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetDataKeyByIdResponse) GetDatakey() *DataKey {
	if x != nil {
		return x.Datakey
	}
	return nil
}

// request parameters for method get_data_keys_by_account
type GetDataKeysByAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
}

func (x *GetDataKeysByAccountRequest) Reset() {
	*x = GetDataKeysByAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeysByAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeysByAccountRequest) ProtoMessage() {}

func (x *GetDataKeysByAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeysByAccountRequest.ProtoReflect.Descriptor instead.
func (*GetDataKeysByAccountRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{15}
}

func (x *GetDataKeysByAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

// response parameters for method get_data_keys_by_account
type GetDataKeysByAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// list of data key objects
	Datakeys []*DataKey `protobuf:"bytes,3,rep,name=datakeys,proto3" json:"datakeys,omitempty"`
}

func (x *GetDataKeysByAccountResponse) Reset() {
	*x = GetDataKeysByAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataKeysByAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataKeysByAccountResponse) ProtoMessage() {}

func (x *GetDataKeysByAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataKeysByAccountResponse.ProtoReflect.Descriptor instead.
func (*GetDataKeysByAccountResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{16}
}

func (x *GetDataKeysByAccountResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDataKeysByAccountResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetDataKeysByAccountResponse) GetDatakeys() []*DataKey {
	if x != nil {
		return x.Datakeys
	}
	return nil
}

// request parameters for method get_decrypted_data_key
type GetDecryptedDataKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName,proto3" json:"data_key_name,omitempty"`
}

func (x *GetDecryptedDataKeyRequest) Reset() {
	*x = GetDecryptedDataKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptedDataKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptedDataKeyRequest) ProtoMessage() {}

func (x *GetDecryptedDataKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecryptedDataKeyRequest.ProtoReflect.Descriptor instead.
func (*GetDecryptedDataKeyRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{17}
}

func (x *GetDecryptedDataKeyRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetDecryptedDataKeyRequest) GetDataKeyName() string {
	if x != nil {
		return x.DataKeyName
	}
	return ""
}

// response parameters for method get_decrypted_data_key
type GetDecryptedDataKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// decrypted data key
	DecryptedDataKey []byte `protobuf:"bytes,3,opt,name=decrypted_data_key,json=decryptedDataKey,proto3" json:"decrypted_data_key,omitempty"`
}

func (x *GetDecryptedDataKeyResponse) Reset() {
	*x = GetDecryptedDataKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptedDataKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptedDataKeyResponse) ProtoMessage() {}

func (x *GetDecryptedDataKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecryptedDataKeyResponse.ProtoReflect.Descriptor instead.
func (*GetDecryptedDataKeyResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{18}
}

func (x *GetDecryptedDataKeyResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDecryptedDataKeyResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetDecryptedDataKeyResponse) GetDecryptedDataKey() []byte {
	if x != nil {
		return x.DecryptedDataKey
	}
	return nil
}

// request parameters for method create_key_node
type CreateKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,3,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
	// is key node enabled?
	IsEnabled bool `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,5,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	// key node description
	KeyDescription string `protobuf:"bytes,6,opt,name=key_description,json=keyDescription,proto3" json:"key_description,omitempty"`
	// key node value, encrypted if data_key_id non zero
	KeyValue []byte `protobuf:"bytes,7,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (x *CreateKeyNodeRequest) Reset() {
	*x = CreateKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyNodeRequest) ProtoMessage() {}

func (x *CreateKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*CreateKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{19}
}

func (x *CreateKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateKeyNodeRequest) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

func (x *CreateKeyNodeRequest) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

func (x *CreateKeyNodeRequest) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *CreateKeyNodeRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

func (x *CreateKeyNodeRequest) GetKeyDescription() string {
	if x != nil {
		return x.KeyDescription
	}
	return ""
}

func (x *CreateKeyNodeRequest) GetKeyValue() []byte {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

// response parameters for method create_key_node
type CreateKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,4,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *CreateKeyNodeResponse) Reset() {
	*x = CreateKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKeyNodeResponse) ProtoMessage() {}

func (x *CreateKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*CreateKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{20}
}

func (x *CreateKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CreateKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CreateKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateKeyNodeResponse) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// request parameters for method enable_key_node
type EnableKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EnableKeyNodeRequest) Reset() {
	*x = EnableKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKeyNodeRequest) ProtoMessage() {}

func (x *EnableKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*EnableKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{21}
}

func (x *EnableKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *EnableKeyNodeRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *EnableKeyNodeRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// response parameters for method enable_key_node
type EnableKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *EnableKeyNodeResponse) Reset() {
	*x = EnableKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableKeyNodeResponse) ProtoMessage() {}

func (x *EnableKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*EnableKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{22}
}

func (x *EnableKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *EnableKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *EnableKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// request parameters for method disable_key_node
type DisableKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DisableKeyNodeRequest) Reset() {
	*x = DisableKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableKeyNodeRequest) ProtoMessage() {}

func (x *DisableKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*DisableKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{23}
}

func (x *DisableKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *DisableKeyNodeRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DisableKeyNodeRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// response parameters for method disable_key_node
type DisableKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DisableKeyNodeResponse) Reset() {
	*x = DisableKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableKeyNodeResponse) ProtoMessage() {}

func (x *DisableKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*DisableKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{24}
}

func (x *DisableKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DisableKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DisableKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// request parameters for method re_encrypt_key_node
type ReEncryptKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,4,opt,name=data_key_id,json=dataKeyId,proto3" json:"data_key_id,omitempty"`
}

func (x *ReEncryptKeyNodeRequest) Reset() {
	*x = ReEncryptKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptKeyNodeRequest) ProtoMessage() {}

func (x *ReEncryptKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*ReEncryptKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{25}
}

func (x *ReEncryptKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ReEncryptKeyNodeRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *ReEncryptKeyNodeRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ReEncryptKeyNodeRequest) GetDataKeyId() int64 {
	if x != nil {
		return x.DataKeyId
	}
	return 0
}

// response parameters for method re_encrypt_key_node
type ReEncryptKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ReEncryptKeyNodeResponse) Reset() {
	*x = ReEncryptKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptKeyNodeResponse) ProtoMessage() {}

func (x *ReEncryptKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*ReEncryptKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{26}
}

func (x *ReEncryptKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *ReEncryptKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ReEncryptKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// request parameters for method copy_key_node
type CopyKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,4,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
}

func (x *CopyKeyNodeRequest) Reset() {
	*x = CopyKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyKeyNodeRequest) ProtoMessage() {}

func (x *CopyKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*CopyKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{27}
}

func (x *CopyKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CopyKeyNodeRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *CopyKeyNodeRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CopyKeyNodeRequest) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

// response parameters for method copy_key_node
type CopyKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// key node id after copy
	CopiedKeyId int64 `protobuf:"varint,4,opt,name=copied_key_id,json=copiedKeyId,proto3" json:"copied_key_id,omitempty"`
}

func (x *CopyKeyNodeResponse) Reset() {
	*x = CopyKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyKeyNodeResponse) ProtoMessage() {}

func (x *CopyKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*CopyKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{28}
}

func (x *CopyKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *CopyKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CopyKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CopyKeyNodeResponse) GetCopiedKeyId() int64 {
	if x != nil {
		return x.CopiedKeyId
	}
	return 0
}

// request parameters for method delete_key_node
type DeleteKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteKeyNodeRequest) Reset() {
	*x = DeleteKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyNodeRequest) ProtoMessage() {}

func (x *DeleteKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *DeleteKeyNodeRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *DeleteKeyNodeRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// response parameters for method delete_key_node
type DeleteKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DeleteKeyNodeResponse) Reset() {
	*x = DeleteKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKeyNodeResponse) ProtoMessage() {}

func (x *DeleteKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *DeleteKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DeleteKeyNodeResponse) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// request parameters for method get_key_node
type GetKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,3,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
}

func (x *GetKeyNodeRequest) Reset() {
	*x = GetKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeRequest) ProtoMessage() {}

func (x *GetKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*GetKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{31}
}

func (x *GetKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetKeyNodeRequest) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

func (x *GetKeyNodeRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

// response parameters for method get_key_node
type GetKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// key node object
	Keynode *KeyNode `protobuf:"bytes,3,opt,name=keynode,proto3" json:"keynode,omitempty"`
}

func (x *GetKeyNodeResponse) Reset() {
	*x = GetKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeResponse) ProtoMessage() {}

func (x *GetKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*GetKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{32}
}

func (x *GetKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetKeyNodeResponse) GetKeynode() *KeyNode {
	if x != nil {
		return x.Keynode
	}
	return nil
}

// request parameters for method get_key_node_by_id
type GetKeyNodeByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetKeyNodeByIdRequest) Reset() {
	*x = GetKeyNodeByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeByIdRequest) ProtoMessage() {}

func (x *GetKeyNodeByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeByIdRequest.ProtoReflect.Descriptor instead.
func (*GetKeyNodeByIdRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{33}
}

func (x *GetKeyNodeByIdRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetKeyNodeByIdRequest) GetKeyId() int64 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

// response parameters for method get_key_node_by_id
type GetKeyNodeByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// key node object
	Keynode *KeyNode `protobuf:"bytes,3,opt,name=keynode,proto3" json:"keynode,omitempty"`
}

func (x *GetKeyNodeByIdResponse) Reset() {
	*x = GetKeyNodeByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeByIdResponse) ProtoMessage() {}

func (x *GetKeyNodeByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeByIdResponse.ProtoReflect.Descriptor instead.
func (*GetKeyNodeByIdResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{34}
}

func (x *GetKeyNodeByIdResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetKeyNodeByIdResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetKeyNodeByIdResponse) GetKeynode() *KeyNode {
	if x != nil {
		return x.Keynode
	}
	return nil
}

// request parameters for method get_key_node_by_path
type GetKeyNodeByPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
}

func (x *GetKeyNodeByPathRequest) Reset() {
	*x = GetKeyNodeByPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeByPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeByPathRequest) ProtoMessage() {}

func (x *GetKeyNodeByPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeByPathRequest.ProtoReflect.Descriptor instead.
func (*GetKeyNodeByPathRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{35}
}

func (x *GetKeyNodeByPathRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetKeyNodeByPathRequest) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

// response parameters for method get_key_node_by_path
type GetKeyNodeByPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// list of key node objects
	Keynodes []*KeyNode `protobuf:"bytes,3,rep,name=keynodes,proto3" json:"keynodes,omitempty"`
}

func (x *GetKeyNodeByPathResponse) Reset() {
	*x = GetKeyNodeByPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyNodeByPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyNodeByPathResponse) ProtoMessage() {}

func (x *GetKeyNodeByPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyNodeByPathResponse.ProtoReflect.Descriptor instead.
func (*GetKeyNodeByPathResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{36}
}

func (x *GetKeyNodeByPathResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetKeyNodeByPathResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetKeyNodeByPathResponse) GetKeynodes() []*KeyNode {
	if x != nil {
		return x.Keynodes
	}
	return nil
}

// request parameters for method get_decrypted_key_node
type GetDecryptedKeyNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath,proto3" json:"node_path,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,3,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
}

func (x *GetDecryptedKeyNodeRequest) Reset() {
	*x = GetDecryptedKeyNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptedKeyNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptedKeyNodeRequest) ProtoMessage() {}

func (x *GetDecryptedKeyNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecryptedKeyNodeRequest.ProtoReflect.Descriptor instead.
func (*GetDecryptedKeyNodeRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{37}
}

func (x *GetDecryptedKeyNodeRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetDecryptedKeyNodeRequest) GetNodePath() string {
	if x != nil {
		return x.NodePath
	}
	return ""
}

func (x *GetDecryptedKeyNodeRequest) GetKeyName() string {
	if x != nil {
		return x.KeyName
	}
	return ""
}

// response parameters for method get_decrypted_key_node
type GetDecryptedKeyNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// decrypted key node value
	DecryptedKeyValue []byte `protobuf:"bytes,3,opt,name=decrypted_key_value,json=decryptedKeyValue,proto3" json:"decrypted_key_value,omitempty"`
}

func (x *GetDecryptedKeyNodeResponse) Reset() {
	*x = GetDecryptedKeyNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDecryptedKeyNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDecryptedKeyNodeResponse) ProtoMessage() {}

func (x *GetDecryptedKeyNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDecryptedKeyNodeResponse.ProtoReflect.Descriptor instead.
func (*GetDecryptedKeyNodeResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{38}
}

func (x *GetDecryptedKeyNodeResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetDecryptedKeyNodeResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetDecryptedKeyNodeResponse) GetDecryptedKeyValue() []byte {
	if x != nil {
		return x.DecryptedKeyValue
	}
	return nil
}

// request parameters for method get_server_version
type GetServerVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam,proto3" json:"dummy_param,omitempty"`
}

func (x *GetServerVersionRequest) Reset() {
	*x = GetServerVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerVersionRequest) ProtoMessage() {}

func (x *GetServerVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerVersionRequest.ProtoReflect.Descriptor instead.
func (*GetServerVersionRequest) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{39}
}

func (x *GetServerVersionRequest) GetDummyParam() int32 {
	if x != nil {
		return x.DummyParam
	}
	return 0
}

// response parameters for method get_server_version
type GetServerVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// version level of server
	ServerVersion string `protobuf:"bytes,3,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`
	// server uptime in seconds
	ServerUptime int64 `protobuf:"varint,4,opt,name=server_uptime,json=serverUptime,proto3" json:"server_uptime,omitempty"`
}

func (x *GetServerVersionResponse) Reset() {
	*x = GetServerVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MServiceSafebox_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerVersionResponse) ProtoMessage() {}

func (x *GetServerVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_MServiceSafebox_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerVersionResponse.ProtoReflect.Descriptor instead.
func (*GetServerVersionResponse) Descriptor() ([]byte, []int) {
	return file_MServiceSafebox_proto_rawDescGZIP(), []int{40}
}

func (x *GetServerVersionResponse) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *GetServerVersionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *GetServerVersionResponse) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *GetServerVersionResponse) GetServerUptime() int64 {
	if x != nil {
		return x.ServerUptime
	}
	return 0
}

var File_MServiceSafebox_proto protoreflect.FileDescriptor

var file_MServiceSafebox_proto_rawDesc = []byte{
	0x0a, 0x15, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x1a, 0x12, 0x44, 0x6d, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x08, 0x54,
	0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d,
	0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xf3, 0x02, 0x0a, 0x07, 0x44, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x22, 0xac, 0x03, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x3d, 0x0a, 0x16, 0x41,
	0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x5d, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x19, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x60, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x95, 0x01, 0x0a, 0x15,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x22, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66,
	0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0x63, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x22, 0xf6, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65,
	0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22,
	0x6a, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x15, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x76, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x52, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x70, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x43, 0x6f,
	0x70, 0x79, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x75, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x6e,
	0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x22, 0xa2, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x22, 0xaa, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xda, 0x13,
	0x0a, 0x0f, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x62, 0x6f,
	0x78, 0x12, 0x82, 0x01, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12,
	0x38, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x73, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79,
	0x12, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x18, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65,
	0x79, 0x73, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61,
	0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x7c, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66,
	0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7f, 0x0a,
	0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4b,
	0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86,
	0x01, 0x0a, 0x13, 0x72, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x52,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x0d, 0x63, 0x6f, 0x70, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x4b, 0x65, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x7c, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x33, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62,
	0x6f, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a,
	0x0c, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x34, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e,
	0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x4e, 0x6f,
	0x64, 0x65, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f,
	0x78, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x2f, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x65, 0x2f, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0xaa, 0x02, 0x0f,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x61, 0x66, 0x65, 0x62, 0x6f, 0x78, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_MServiceSafebox_proto_rawDescOnce sync.Once
	file_MServiceSafebox_proto_rawDescData = file_MServiceSafebox_proto_rawDesc
)

func file_MServiceSafebox_proto_rawDescGZIP() []byte {
	file_MServiceSafebox_proto_rawDescOnce.Do(func() {
		file_MServiceSafebox_proto_rawDescData = protoimpl.X.CompressGZIP(file_MServiceSafebox_proto_rawDescData)
	})
	return file_MServiceSafebox_proto_rawDescData
}

var file_MServiceSafebox_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_MServiceSafebox_proto_goTypes = []interface{}{
	(*TreeNode)(nil),                     // 0: org.gaterace.mservice.safebox.TreeNode
	(*DataKey)(nil),                      // 1: org.gaterace.mservice.safebox.DataKey
	(*KeyNode)(nil),                      // 2: org.gaterace.mservice.safebox.KeyNode
	(*AddSharedSecretRequest)(nil),       // 3: org.gaterace.mservice.safebox.AddSharedSecretRequest
	(*AddSharedSecretResponse)(nil),      // 4: org.gaterace.mservice.safebox.AddSharedSecretResponse
	(*ClearSharedSecretsRequest)(nil),    // 5: org.gaterace.mservice.safebox.ClearSharedSecretsRequest
	(*ClearSharedSecretsResponse)(nil),   // 6: org.gaterace.mservice.safebox.ClearSharedSecretsResponse
	(*CreateDataKeyRequest)(nil),         // 7: org.gaterace.mservice.safebox.CreateDataKeyRequest
	(*CreateDataKeyResponse)(nil),        // 8: org.gaterace.mservice.safebox.CreateDataKeyResponse
	(*DeleteDataKeyRequest)(nil),         // 9: org.gaterace.mservice.safebox.DeleteDataKeyRequest
	(*DeleteDataKeyResponse)(nil),        // 10: org.gaterace.mservice.safebox.DeleteDataKeyResponse
	(*GetDataKeyRequest)(nil),            // 11: org.gaterace.mservice.safebox.GetDataKeyRequest
	(*GetDataKeyResponse)(nil),           // 12: org.gaterace.mservice.safebox.GetDataKeyResponse
	(*GetDataKeyByIdRequest)(nil),        // 13: org.gaterace.mservice.safebox.GetDataKeyByIdRequest
	(*GetDataKeyByIdResponse)(nil),       // 14: org.gaterace.mservice.safebox.GetDataKeyByIdResponse
	(*GetDataKeysByAccountRequest)(nil),  // 15: org.gaterace.mservice.safebox.GetDataKeysByAccountRequest
	(*GetDataKeysByAccountResponse)(nil), // 16: org.gaterace.mservice.safebox.GetDataKeysByAccountResponse
	(*GetDecryptedDataKeyRequest)(nil),   // 17: org.gaterace.mservice.safebox.GetDecryptedDataKeyRequest
	(*GetDecryptedDataKeyResponse)(nil),  // 18: org.gaterace.mservice.safebox.GetDecryptedDataKeyResponse
	(*CreateKeyNodeRequest)(nil),         // 19: org.gaterace.mservice.safebox.CreateKeyNodeRequest
	(*CreateKeyNodeResponse)(nil),        // 20: org.gaterace.mservice.safebox.CreateKeyNodeResponse
	(*EnableKeyNodeRequest)(nil),         // 21: org.gaterace.mservice.safebox.EnableKeyNodeRequest
	(*EnableKeyNodeResponse)(nil),        // 22: org.gaterace.mservice.safebox.EnableKeyNodeResponse
	(*DisableKeyNodeRequest)(nil),        // 23: org.gaterace.mservice.safebox.DisableKeyNodeRequest
	(*DisableKeyNodeResponse)(nil),       // 24: org.gaterace.mservice.safebox.DisableKeyNodeResponse
	(*ReEncryptKeyNodeRequest)(nil),      // 25: org.gaterace.mservice.safebox.ReEncryptKeyNodeRequest
	(*ReEncryptKeyNodeResponse)(nil),     // 26: org.gaterace.mservice.safebox.ReEncryptKeyNodeResponse
	(*CopyKeyNodeRequest)(nil),           // 27: org.gaterace.mservice.safebox.CopyKeyNodeRequest
	(*CopyKeyNodeResponse)(nil),          // 28: org.gaterace.mservice.safebox.CopyKeyNodeResponse
	(*DeleteKeyNodeRequest)(nil),         // 29: org.gaterace.mservice.safebox.DeleteKeyNodeRequest
	(*DeleteKeyNodeResponse)(nil),        // 30: org.gaterace.mservice.safebox.DeleteKeyNodeResponse
	(*GetKeyNodeRequest)(nil),            // 31: org.gaterace.mservice.safebox.GetKeyNodeRequest
	(*GetKeyNodeResponse)(nil),           // 32: org.gaterace.mservice.safebox.GetKeyNodeResponse
	(*GetKeyNodeByIdRequest)(nil),        // 33: org.gaterace.mservice.safebox.GetKeyNodeByIdRequest
	(*GetKeyNodeByIdResponse)(nil),       // 34: org.gaterace.mservice.safebox.GetKeyNodeByIdResponse
	(*GetKeyNodeByPathRequest)(nil),      // 35: org.gaterace.mservice.safebox.GetKeyNodeByPathRequest
	(*GetKeyNodeByPathResponse)(nil),     // 36: org.gaterace.mservice.safebox.GetKeyNodeByPathResponse
	(*GetDecryptedKeyNodeRequest)(nil),   // 37: org.gaterace.mservice.safebox.GetDecryptedKeyNodeRequest
	(*GetDecryptedKeyNodeResponse)(nil),  // 38: org.gaterace.mservice.safebox.GetDecryptedKeyNodeResponse
	(*GetServerVersionRequest)(nil),      // 39: org.gaterace.mservice.safebox.GetServerVersionRequest
	(*GetServerVersionResponse)(nil),     // 40: org.gaterace.mservice.safebox.GetServerVersionResponse
	(*dml.DateTime)(nil),                 // 41: dml.DateTime
}
var file_MServiceSafebox_proto_depIdxs = []int32{
	41, // 0: org.gaterace.mservice.safebox.TreeNode.created:type_name -> dml.DateTime
	41, // 1: org.gaterace.mservice.safebox.TreeNode.modified:type_name -> dml.DateTime
	41, // 2: org.gaterace.mservice.safebox.TreeNode.deleted:type_name -> dml.DateTime
	41, // 3: org.gaterace.mservice.safebox.DataKey.created:type_name -> dml.DateTime
	41, // 4: org.gaterace.mservice.safebox.DataKey.modified:type_name -> dml.DateTime
	41, // 5: org.gaterace.mservice.safebox.DataKey.deleted:type_name -> dml.DateTime
	41, // 6: org.gaterace.mservice.safebox.KeyNode.created:type_name -> dml.DateTime
	41, // 7: org.gaterace.mservice.safebox.KeyNode.modified:type_name -> dml.DateTime
	41, // 8: org.gaterace.mservice.safebox.KeyNode.deleted:type_name -> dml.DateTime
	1,  // 9: org.gaterace.mservice.safebox.GetDataKeyResponse.datakey:type_name -> org.gaterace.mservice.safebox.DataKey
	1,  // 10: org.gaterace.mservice.safebox.GetDataKeyByIdResponse.datakey:type_name -> org.gaterace.mservice.safebox.DataKey
	1,  // 11: org.gaterace.mservice.safebox.GetDataKeysByAccountResponse.datakeys:type_name -> org.gaterace.mservice.safebox.DataKey
	2,  // 12: org.gaterace.mservice.safebox.GetKeyNodeResponse.keynode:type_name -> org.gaterace.mservice.safebox.KeyNode
	2,  // 13: org.gaterace.mservice.safebox.GetKeyNodeByIdResponse.keynode:type_name -> org.gaterace.mservice.safebox.KeyNode
	2,  // 14: org.gaterace.mservice.safebox.GetKeyNodeByPathResponse.keynodes:type_name -> org.gaterace.mservice.safebox.KeyNode
	3,  // 15: org.gaterace.mservice.safebox.MServiceSafebox.add_shared_secret:input_type -> org.gaterace.mservice.safebox.AddSharedSecretRequest
	5,  // 16: org.gaterace.mservice.safebox.MServiceSafebox.clear_shared_secrets:input_type -> org.gaterace.mservice.safebox.ClearSharedSecretsRequest
	7,  // 17: org.gaterace.mservice.safebox.MServiceSafebox.create_data_key:input_type -> org.gaterace.mservice.safebox.CreateDataKeyRequest
	9,  // 18: org.gaterace.mservice.safebox.MServiceSafebox.delete_data_key:input_type -> org.gaterace.mservice.safebox.DeleteDataKeyRequest
	11, // 19: org.gaterace.mservice.safebox.MServiceSafebox.get_data_key:input_type -> org.gaterace.mservice.safebox.GetDataKeyRequest
	13, // 20: org.gaterace.mservice.safebox.MServiceSafebox.get_data_key_by_id:input_type -> org.gaterace.mservice.safebox.GetDataKeyByIdRequest
	15, // 21: org.gaterace.mservice.safebox.MServiceSafebox.get_data_keys_by_account:input_type -> org.gaterace.mservice.safebox.GetDataKeysByAccountRequest
	17, // 22: org.gaterace.mservice.safebox.MServiceSafebox.get_decrypted_data_key:input_type -> org.gaterace.mservice.safebox.GetDecryptedDataKeyRequest
	19, // 23: org.gaterace.mservice.safebox.MServiceSafebox.create_key_node:input_type -> org.gaterace.mservice.safebox.CreateKeyNodeRequest
	21, // 24: org.gaterace.mservice.safebox.MServiceSafebox.enable_key_node:input_type -> org.gaterace.mservice.safebox.EnableKeyNodeRequest
	23, // 25: org.gaterace.mservice.safebox.MServiceSafebox.disable_key_node:input_type -> org.gaterace.mservice.safebox.DisableKeyNodeRequest
	25, // 26: org.gaterace.mservice.safebox.MServiceSafebox.re_encrypt_key_node:input_type -> org.gaterace.mservice.safebox.ReEncryptKeyNodeRequest
	27, // 27: org.gaterace.mservice.safebox.MServiceSafebox.copy_key_node:input_type -> org.gaterace.mservice.safebox.CopyKeyNodeRequest
	29, // 28: org.gaterace.mservice.safebox.MServiceSafebox.delete_key_node:input_type -> org.gaterace.mservice.safebox.DeleteKeyNodeRequest
	31, // 29: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node:input_type -> org.gaterace.mservice.safebox.GetKeyNodeRequest
	33, // 30: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node_by_id:input_type -> org.gaterace.mservice.safebox.GetKeyNodeByIdRequest
	35, // 31: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node_by_path:input_type -> org.gaterace.mservice.safebox.GetKeyNodeByPathRequest
	37, // 32: org.gaterace.mservice.safebox.MServiceSafebox.get_decrypted_key_node:input_type -> org.gaterace.mservice.safebox.GetDecryptedKeyNodeRequest
	39, // 33: org.gaterace.mservice.safebox.MServiceSafebox.get_server_version:input_type -> org.gaterace.mservice.safebox.GetServerVersionRequest
	4,  // 34: org.gaterace.mservice.safebox.MServiceSafebox.add_shared_secret:output_type -> org.gaterace.mservice.safebox.AddSharedSecretResponse
	6,  // 35: org.gaterace.mservice.safebox.MServiceSafebox.clear_shared_secrets:output_type -> org.gaterace.mservice.safebox.ClearSharedSecretsResponse
	8,  // 36: org.gaterace.mservice.safebox.MServiceSafebox.create_data_key:output_type -> org.gaterace.mservice.safebox.CreateDataKeyResponse
	10, // 37: org.gaterace.mservice.safebox.MServiceSafebox.delete_data_key:output_type -> org.gaterace.mservice.safebox.DeleteDataKeyResponse
	12, // 38: org.gaterace.mservice.safebox.MServiceSafebox.get_data_key:output_type -> org.gaterace.mservice.safebox.GetDataKeyResponse
	14, // 39: org.gaterace.mservice.safebox.MServiceSafebox.get_data_key_by_id:output_type -> org.gaterace.mservice.safebox.GetDataKeyByIdResponse
	16, // 40: org.gaterace.mservice.safebox.MServiceSafebox.get_data_keys_by_account:output_type -> org.gaterace.mservice.safebox.GetDataKeysByAccountResponse
	18, // 41: org.gaterace.mservice.safebox.MServiceSafebox.get_decrypted_data_key:output_type -> org.gaterace.mservice.safebox.GetDecryptedDataKeyResponse
	20, // 42: org.gaterace.mservice.safebox.MServiceSafebox.create_key_node:output_type -> org.gaterace.mservice.safebox.CreateKeyNodeResponse
	22, // 43: org.gaterace.mservice.safebox.MServiceSafebox.enable_key_node:output_type -> org.gaterace.mservice.safebox.EnableKeyNodeResponse
	24, // 44: org.gaterace.mservice.safebox.MServiceSafebox.disable_key_node:output_type -> org.gaterace.mservice.safebox.DisableKeyNodeResponse
	26, // 45: org.gaterace.mservice.safebox.MServiceSafebox.re_encrypt_key_node:output_type -> org.gaterace.mservice.safebox.ReEncryptKeyNodeResponse
	28, // 46: org.gaterace.mservice.safebox.MServiceSafebox.copy_key_node:output_type -> org.gaterace.mservice.safebox.CopyKeyNodeResponse
	30, // 47: org.gaterace.mservice.safebox.MServiceSafebox.delete_key_node:output_type -> org.gaterace.mservice.safebox.DeleteKeyNodeResponse
	32, // 48: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node:output_type -> org.gaterace.mservice.safebox.GetKeyNodeResponse
	34, // 49: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node_by_id:output_type -> org.gaterace.mservice.safebox.GetKeyNodeByIdResponse
	36, // 50: org.gaterace.mservice.safebox.MServiceSafebox.get_key_node_by_path:output_type -> org.gaterace.mservice.safebox.GetKeyNodeByPathResponse
	38, // 51: org.gaterace.mservice.safebox.MServiceSafebox.get_decrypted_key_node:output_type -> org.gaterace.mservice.safebox.GetDecryptedKeyNodeResponse
	40, // 52: org.gaterace.mservice.safebox.MServiceSafebox.get_server_version:output_type -> org.gaterace.mservice.safebox.GetServerVersionResponse
	34, // [34:53] is the sub-list for method output_type
	15, // [15:34] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_MServiceSafebox_proto_init() }
func file_MServiceSafebox_proto_init() {
	if File_MServiceSafebox_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MServiceSafebox_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSharedSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSharedSecretResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearSharedSecretsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearSharedSecretsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeyByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeysByAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataKeysByAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptedDataKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptedDataKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeByPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyNodeByPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptedKeyNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDecryptedKeyNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MServiceSafebox_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MServiceSafebox_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MServiceSafebox_proto_goTypes,
		DependencyIndexes: file_MServiceSafebox_proto_depIdxs,
		MessageInfos:      file_MServiceSafebox_proto_msgTypes,
	}.Build()
	File_MServiceSafebox_proto = out.File
	file_MServiceSafebox_proto_rawDesc = nil
	file_MServiceSafebox_proto_goTypes = nil
	file_MServiceSafebox_proto_depIdxs = nil
}
