// Copyright 2019 Demian Harvill
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: MServiceSafebox.proto

/*
Package mservicesafebox is a generated protocol buffer package.

It is generated from these files:
	MServiceSafebox.proto

It has these top-level messages:
	TreeNode
	DataKey
	KeyNode
	AddSharedSecretRequest
	AddSharedSecretResponse
	ClearSharedSecretsRequest
	ClearSharedSecretsResponse
	CreateDataKeyRequest
	CreateDataKeyResponse
	DeleteDataKeyRequest
	DeleteDataKeyResponse
	GetDataKeyRequest
	GetDataKeyResponse
	GetDataKeyByIdRequest
	GetDataKeyByIdResponse
	GetDataKeysByAccountRequest
	GetDataKeysByAccountResponse
	GetDecryptedDataKeyRequest
	GetDecryptedDataKeyResponse
	CreateKeyNodeRequest
	CreateKeyNodeResponse
	EnableKeyNodeRequest
	EnableKeyNodeResponse
	DisableKeyNodeRequest
	DisableKeyNodeResponse
	ReEncryptKeyNodeRequest
	ReEncryptKeyNodeResponse
	CopyKeyNodeRequest
	CopyKeyNodeResponse
	DeleteKeyNodeRequest
	DeleteKeyNodeResponse
	GetKeyNodeRequest
	GetKeyNodeResponse
	GetKeyNodeByIdRequest
	GetKeyNodeByIdResponse
	GetKeyNodeByPathRequest
	GetKeyNodeByPathResponse
	GetDecryptedKeyNodeRequest
	GetDecryptedKeyNodeResponse
*/
package mservicesafebox

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dml "github.com/gaterace/dml-go/pkg/dml"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// MService tree node entity
type TreeNode struct {
	// unique identifier for an MService tree node
	NodeId int64 `protobuf:"varint,1,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,8,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
}

func (m *TreeNode) Reset()                    { *m = TreeNode{} }
func (m *TreeNode) String() string            { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()               {}
func (*TreeNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TreeNode) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *TreeNode) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *TreeNode) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *TreeNode) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *TreeNode) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *TreeNode) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TreeNode) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *TreeNode) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

// MService data key entity
type DataKey struct {
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,1,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,7,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,8,opt,name=data_key_name,json=dataKeyName" json:"data_key_name,omitempty"`
	// data key description
	DataKeyDescription string `protobuf:"bytes,9,opt,name=data_key_description,json=dataKeyDescription" json:"data_key_description,omitempty"`
	// encrypted data key
	DataKey []byte `protobuf:"bytes,10,opt,name=data_key,json=dataKey,proto3" json:"data_key,omitempty"`
}

func (m *DataKey) Reset()                    { *m = DataKey{} }
func (m *DataKey) String() string            { return proto.CompactTextString(m) }
func (*DataKey) ProtoMessage()               {}
func (*DataKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataKey) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

func (m *DataKey) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *DataKey) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *DataKey) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *DataKey) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *DataKey) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *DataKey) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *DataKey) GetDataKeyName() string {
	if m != nil {
		return m.DataKeyName
	}
	return ""
}

func (m *DataKey) GetDataKeyDescription() string {
	if m != nil {
		return m.DataKeyDescription
	}
	return ""
}

func (m *DataKey) GetDataKey() []byte {
	if m != nil {
		return m.DataKey
	}
	return nil
}

// MService key node entity
type KeyNode struct {
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,1,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// creation date
	Created *dml.DateTime `protobuf:"bytes,2,opt,name=created" json:"created,omitempty"`
	// modification date
	Modified *dml.DateTime `protobuf:"bytes,3,opt,name=modified" json:"modified,omitempty"`
	// deletion date
	Deleted *dml.DateTime `protobuf:"bytes,4,opt,name=deleted" json:"deleted,omitempty"`
	// has record been deleted?
	IsDeleted bool `protobuf:"varint,5,opt,name=is_deleted,json=isDeleted" json:"is_deleted,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,6,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService tree node
	NodeId int64 `protobuf:"varint,7,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,8,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
	// is key node enabled?
	IsEnabled bool `protobuf:"varint,9,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,10,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	// key node description
	KeyDescription string `protobuf:"bytes,11,opt,name=key_description,json=keyDescription" json:"key_description,omitempty"`
	// key node value, encrypted if data_key_id non zero
	KeyValue []byte `protobuf:"bytes,12,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,13,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
}

func (m *KeyNode) Reset()                    { *m = KeyNode{} }
func (m *KeyNode) String() string            { return proto.CompactTextString(m) }
func (*KeyNode) ProtoMessage()               {}
func (*KeyNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyNode) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *KeyNode) GetCreated() *dml.DateTime {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *KeyNode) GetModified() *dml.DateTime {
	if m != nil {
		return m.Modified
	}
	return nil
}

func (m *KeyNode) GetDeleted() *dml.DateTime {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *KeyNode) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *KeyNode) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *KeyNode) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *KeyNode) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

func (m *KeyNode) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *KeyNode) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *KeyNode) GetKeyDescription() string {
	if m != nil {
		return m.KeyDescription
	}
	return ""
}

func (m *KeyNode) GetKeyValue() []byte {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

func (m *KeyNode) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

// request parameters for method add_shared_secret
type AddSharedSecretRequest struct {
	// shared secret
	SharedSecret string `protobuf:"bytes,1,opt,name=shared_secret,json=sharedSecret" json:"shared_secret,omitempty"`
}

func (m *AddSharedSecretRequest) Reset()                    { *m = AddSharedSecretRequest{} }
func (m *AddSharedSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*AddSharedSecretRequest) ProtoMessage()               {}
func (*AddSharedSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddSharedSecretRequest) GetSharedSecret() string {
	if m != nil {
		return m.SharedSecret
	}
	return ""
}

// response parameters for method add_shared_secret
type AddSharedSecretResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *AddSharedSecretResponse) Reset()                    { *m = AddSharedSecretResponse{} }
func (m *AddSharedSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*AddSharedSecretResponse) ProtoMessage()               {}
func (*AddSharedSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddSharedSecretResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *AddSharedSecretResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method clear_shared_secrets
type ClearSharedSecretsRequest struct {
	// placeholder param to avoid empty message
	DummyParam int32 `protobuf:"varint,1,opt,name=dummy_param,json=dummyParam" json:"dummy_param,omitempty"`
}

func (m *ClearSharedSecretsRequest) Reset()                    { *m = ClearSharedSecretsRequest{} }
func (m *ClearSharedSecretsRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearSharedSecretsRequest) ProtoMessage()               {}
func (*ClearSharedSecretsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ClearSharedSecretsRequest) GetDummyParam() int32 {
	if m != nil {
		return m.DummyParam
	}
	return 0
}

// response parameters for method clear_shared_secrets
type ClearSharedSecretsResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *ClearSharedSecretsResponse) Reset()                    { *m = ClearSharedSecretsResponse{} }
func (m *ClearSharedSecretsResponse) String() string            { return proto.CompactTextString(m) }
func (*ClearSharedSecretsResponse) ProtoMessage()               {}
func (*ClearSharedSecretsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ClearSharedSecretsResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ClearSharedSecretsResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

// request parameters for method create_data_key
type CreateDataKeyRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName" json:"data_key_name,omitempty"`
	// data key description
	DataKeyDescription string `protobuf:"bytes,3,opt,name=data_key_description,json=dataKeyDescription" json:"data_key_description,omitempty"`
}

func (m *CreateDataKeyRequest) Reset()                    { *m = CreateDataKeyRequest{} }
func (m *CreateDataKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDataKeyRequest) ProtoMessage()               {}
func (*CreateDataKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CreateDataKeyRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CreateDataKeyRequest) GetDataKeyName() string {
	if m != nil {
		return m.DataKeyName
	}
	return ""
}

func (m *CreateDataKeyRequest) GetDataKeyDescription() string {
	if m != nil {
		return m.DataKeyDescription
	}
	return ""
}

// response parameters for method create_data_key
type CreateDataKeyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,4,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
}

func (m *CreateDataKeyResponse) Reset()                    { *m = CreateDataKeyResponse{} }
func (m *CreateDataKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDataKeyResponse) ProtoMessage()               {}
func (*CreateDataKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateDataKeyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateDataKeyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateDataKeyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateDataKeyResponse) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

// request parameters for method delete_data_key
type DeleteDataKeyRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,2,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteDataKeyRequest) Reset()                    { *m = DeleteDataKeyRequest{} }
func (m *DeleteDataKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDataKeyRequest) ProtoMessage()               {}
func (*DeleteDataKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteDataKeyRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *DeleteDataKeyRequest) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

func (m *DeleteDataKeyRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_data_key
type DeleteDataKeyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteDataKeyResponse) Reset()                    { *m = DeleteDataKeyResponse{} }
func (m *DeleteDataKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDataKeyResponse) ProtoMessage()               {}
func (*DeleteDataKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteDataKeyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteDataKeyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteDataKeyResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_data_key
type GetDataKeyRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName" json:"data_key_name,omitempty"`
}

func (m *GetDataKeyRequest) Reset()                    { *m = GetDataKeyRequest{} }
func (m *GetDataKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeyRequest) ProtoMessage()               {}
func (*GetDataKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GetDataKeyRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetDataKeyRequest) GetDataKeyName() string {
	if m != nil {
		return m.DataKeyName
	}
	return ""
}

// response parameters for method get_data_key
type GetDataKeyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// data key object
	Datakey *DataKey `protobuf:"bytes,3,opt,name=datakey" json:"datakey,omitempty"`
}

func (m *GetDataKeyResponse) Reset()                    { *m = GetDataKeyResponse{} }
func (m *GetDataKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeyResponse) ProtoMessage()               {}
func (*GetDataKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetDataKeyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetDataKeyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDataKeyResponse) GetDatakey() *DataKey {
	if m != nil {
		return m.Datakey
	}
	return nil
}

// request parameters for method get_data_key_by_id
type GetDataKeyByIdRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,2,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
}

func (m *GetDataKeyByIdRequest) Reset()                    { *m = GetDataKeyByIdRequest{} }
func (m *GetDataKeyByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeyByIdRequest) ProtoMessage()               {}
func (*GetDataKeyByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetDataKeyByIdRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetDataKeyByIdRequest) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

// response parameters for method get_data_key_by_id
type GetDataKeyByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// data key object
	Datakey *DataKey `protobuf:"bytes,3,opt,name=datakey" json:"datakey,omitempty"`
}

func (m *GetDataKeyByIdResponse) Reset()                    { *m = GetDataKeyByIdResponse{} }
func (m *GetDataKeyByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeyByIdResponse) ProtoMessage()               {}
func (*GetDataKeyByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetDataKeyByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetDataKeyByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDataKeyByIdResponse) GetDatakey() *DataKey {
	if m != nil {
		return m.Datakey
	}
	return nil
}

// request parameters for method get_data_keys_by_account
type GetDataKeysByAccountRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
}

func (m *GetDataKeysByAccountRequest) Reset()                    { *m = GetDataKeysByAccountRequest{} }
func (m *GetDataKeysByAccountRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeysByAccountRequest) ProtoMessage()               {}
func (*GetDataKeysByAccountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *GetDataKeysByAccountRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

// response parameters for method get_data_keys_by_account
type GetDataKeysByAccountResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of data key objects
	Datakeys []*DataKey `protobuf:"bytes,3,rep,name=datakeys" json:"datakeys,omitempty"`
}

func (m *GetDataKeysByAccountResponse) Reset()                    { *m = GetDataKeysByAccountResponse{} }
func (m *GetDataKeysByAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDataKeysByAccountResponse) ProtoMessage()               {}
func (*GetDataKeysByAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GetDataKeysByAccountResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetDataKeysByAccountResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDataKeysByAccountResponse) GetDatakeys() []*DataKey {
	if m != nil {
		return m.Datakeys
	}
	return nil
}

// request parameters for method get_decrypted_data_key
type GetDecryptedDataKeyRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// data key name
	DataKeyName string `protobuf:"bytes,2,opt,name=data_key_name,json=dataKeyName" json:"data_key_name,omitempty"`
}

func (m *GetDecryptedDataKeyRequest) Reset()                    { *m = GetDecryptedDataKeyRequest{} }
func (m *GetDecryptedDataKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDecryptedDataKeyRequest) ProtoMessage()               {}
func (*GetDecryptedDataKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetDecryptedDataKeyRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetDecryptedDataKeyRequest) GetDataKeyName() string {
	if m != nil {
		return m.DataKeyName
	}
	return ""
}

// response parameters for method get_decrypted_data_key
type GetDecryptedDataKeyResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// decrypted data key
	DecryptedDataKey []byte `protobuf:"bytes,3,opt,name=decrypted_data_key,json=decryptedDataKey,proto3" json:"decrypted_data_key,omitempty"`
}

func (m *GetDecryptedDataKeyResponse) Reset()                    { *m = GetDecryptedDataKeyResponse{} }
func (m *GetDecryptedDataKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDecryptedDataKeyResponse) ProtoMessage()               {}
func (*GetDecryptedDataKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetDecryptedDataKeyResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetDecryptedDataKeyResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDecryptedDataKeyResponse) GetDecryptedDataKey() []byte {
	if m != nil {
		return m.DecryptedDataKey
	}
	return nil
}

// request parameters for method create_key_node
type CreateKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,3,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
	// is key node enabled?
	IsEnabled bool `protobuf:"varint,4,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,5,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
	// key node description
	KeyDescription string `protobuf:"bytes,6,opt,name=key_description,json=keyDescription" json:"key_description,omitempty"`
	// key node value, encrypted if data_key_id non zero
	KeyValue []byte `protobuf:"bytes,7,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
}

func (m *CreateKeyNodeRequest) Reset()                    { *m = CreateKeyNodeRequest{} }
func (m *CreateKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyNodeRequest) ProtoMessage()               {}
func (*CreateKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CreateKeyNodeRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *CreateKeyNodeRequest) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

func (m *CreateKeyNodeRequest) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *CreateKeyNodeRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *CreateKeyNodeRequest) GetKeyDescription() string {
	if m != nil {
		return m.KeyDescription
	}
	return ""
}

func (m *CreateKeyNodeRequest) GetKeyValue() []byte {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

// response parameters for method create_key_node
type CreateKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,4,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *CreateKeyNodeResponse) Reset()                    { *m = CreateKeyNodeResponse{} }
func (m *CreateKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKeyNodeResponse) ProtoMessage()               {}
func (*CreateKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CreateKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CreateKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CreateKeyNodeResponse) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// request parameters for method enable_key_node
type EnableKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *EnableKeyNodeRequest) Reset()                    { *m = EnableKeyNodeRequest{} }
func (m *EnableKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EnableKeyNodeRequest) ProtoMessage()               {}
func (*EnableKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *EnableKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *EnableKeyNodeRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *EnableKeyNodeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method enable_key_node
type EnableKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *EnableKeyNodeResponse) Reset()                    { *m = EnableKeyNodeResponse{} }
func (m *EnableKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*EnableKeyNodeResponse) ProtoMessage()               {}
func (*EnableKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *EnableKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *EnableKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *EnableKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method disable_key_node
type DisableKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DisableKeyNodeRequest) Reset()                    { *m = DisableKeyNodeRequest{} }
func (m *DisableKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DisableKeyNodeRequest) ProtoMessage()               {}
func (*DisableKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DisableKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *DisableKeyNodeRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DisableKeyNodeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method disable_key_node
type DisableKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DisableKeyNodeResponse) Reset()                    { *m = DisableKeyNodeResponse{} }
func (m *DisableKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DisableKeyNodeResponse) ProtoMessage()               {}
func (*DisableKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DisableKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DisableKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DisableKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method re_encrypt_key_node
type ReEncryptKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// unique identifier for an MService data key
	DataKeyId int64 `protobuf:"varint,4,opt,name=data_key_id,json=dataKeyId" json:"data_key_id,omitempty"`
}

func (m *ReEncryptKeyNodeRequest) Reset()                    { *m = ReEncryptKeyNodeRequest{} }
func (m *ReEncryptKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*ReEncryptKeyNodeRequest) ProtoMessage()               {}
func (*ReEncryptKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ReEncryptKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *ReEncryptKeyNodeRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *ReEncryptKeyNodeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ReEncryptKeyNodeRequest) GetDataKeyId() int64 {
	if m != nil {
		return m.DataKeyId
	}
	return 0
}

// response parameters for method re_encrypt_key_node
type ReEncryptKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *ReEncryptKeyNodeResponse) Reset()                    { *m = ReEncryptKeyNodeResponse{} }
func (m *ReEncryptKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*ReEncryptKeyNodeResponse) ProtoMessage()               {}
func (*ReEncryptKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReEncryptKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *ReEncryptKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *ReEncryptKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method copy_key_node
type CopyKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,4,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
}

func (m *CopyKeyNodeRequest) Reset()                    { *m = CopyKeyNodeRequest{} }
func (m *CopyKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*CopyKeyNodeRequest) ProtoMessage()               {}
func (*CopyKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CopyKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *CopyKeyNodeRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *CopyKeyNodeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CopyKeyNodeRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

// response parameters for method copy_key_node
type CopyKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
	// key node id after copy
	CopiedKeyId int64 `protobuf:"varint,4,opt,name=copied_key_id,json=copiedKeyId" json:"copied_key_id,omitempty"`
}

func (m *CopyKeyNodeResponse) Reset()                    { *m = CopyKeyNodeResponse{} }
func (m *CopyKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*CopyKeyNodeResponse) ProtoMessage()               {}
func (*CopyKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CopyKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *CopyKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *CopyKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CopyKeyNodeResponse) GetCopiedKeyId() int64 {
	if m != nil {
		return m.CopiedKeyId
	}
	return 0
}

// request parameters for method delete_key_node
type DeleteKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteKeyNodeRequest) Reset()                    { *m = DeleteKeyNodeRequest{} }
func (m *DeleteKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteKeyNodeRequest) ProtoMessage()               {}
func (*DeleteKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DeleteKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *DeleteKeyNodeRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *DeleteKeyNodeRequest) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// response parameters for method delete_key_node
type DeleteKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// version of this record
	Version int32 `protobuf:"varint,3,opt,name=version" json:"version,omitempty"`
}

func (m *DeleteKeyNodeResponse) Reset()                    { *m = DeleteKeyNodeResponse{} }
func (m *DeleteKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteKeyNodeResponse) ProtoMessage()               {}
func (*DeleteKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *DeleteKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *DeleteKeyNodeResponse) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// request parameters for method get_key_node
type GetKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,3,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
}

func (m *GetKeyNodeRequest) Reset()                    { *m = GetKeyNodeRequest{} }
func (m *GetKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeRequest) ProtoMessage()               {}
func (*GetKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetKeyNodeRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *GetKeyNodeRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

// response parameters for method get_key_node
type GetKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// key node object
	Keynode *KeyNode `protobuf:"bytes,3,opt,name=keynode" json:"keynode,omitempty"`
}

func (m *GetKeyNodeResponse) Reset()                    { *m = GetKeyNodeResponse{} }
func (m *GetKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeResponse) ProtoMessage()               {}
func (*GetKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetKeyNodeResponse) GetKeynode() *KeyNode {
	if m != nil {
		return m.Keynode
	}
	return nil
}

// request parameters for method get_key_node_by_id
type GetKeyNodeByIdRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// unique identifier for an MService key node
	KeyId int64 `protobuf:"varint,2,opt,name=key_id,json=keyId" json:"key_id,omitempty"`
}

func (m *GetKeyNodeByIdRequest) Reset()                    { *m = GetKeyNodeByIdRequest{} }
func (m *GetKeyNodeByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeByIdRequest) ProtoMessage()               {}
func (*GetKeyNodeByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetKeyNodeByIdRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetKeyNodeByIdRequest) GetKeyId() int64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

// response parameters for method get_key_node_by_id
type GetKeyNodeByIdResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// key node object
	Keynode *KeyNode `protobuf:"bytes,3,opt,name=keynode" json:"keynode,omitempty"`
}

func (m *GetKeyNodeByIdResponse) Reset()                    { *m = GetKeyNodeByIdResponse{} }
func (m *GetKeyNodeByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeByIdResponse) ProtoMessage()               {}
func (*GetKeyNodeByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetKeyNodeByIdResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetKeyNodeByIdResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetKeyNodeByIdResponse) GetKeynode() *KeyNode {
	if m != nil {
		return m.Keynode
	}
	return nil
}

// request parameters for method get_key_node_by_path
type GetKeyNodeByPathRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
}

func (m *GetKeyNodeByPathRequest) Reset()                    { *m = GetKeyNodeByPathRequest{} }
func (m *GetKeyNodeByPathRequest) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeByPathRequest) ProtoMessage()               {}
func (*GetKeyNodeByPathRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *GetKeyNodeByPathRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetKeyNodeByPathRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

// response parameters for method get_key_node_by_path
type GetKeyNodeByPathResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// list of key node objects
	Keynodes []*KeyNode `protobuf:"bytes,3,rep,name=keynodes" json:"keynodes,omitempty"`
}

func (m *GetKeyNodeByPathResponse) Reset()                    { *m = GetKeyNodeByPathResponse{} }
func (m *GetKeyNodeByPathResponse) String() string            { return proto.CompactTextString(m) }
func (*GetKeyNodeByPathResponse) ProtoMessage()               {}
func (*GetKeyNodeByPathResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetKeyNodeByPathResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetKeyNodeByPathResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetKeyNodeByPathResponse) GetKeynodes() []*KeyNode {
	if m != nil {
		return m.Keynodes
	}
	return nil
}

// request parameters for method get_decrypted_key_node
type GetDecryptedKeyNodeRequest struct {
	// account owning this tree node and associated key nodes
	AccountName string `protobuf:"bytes,1,opt,name=account_name,json=accountName" json:"account_name,omitempty"`
	// tree node path, with forward slash separators
	NodePath string `protobuf:"bytes,2,opt,name=node_path,json=nodePath" json:"node_path,omitempty"`
	// key node key name
	KeyName string `protobuf:"bytes,3,opt,name=key_name,json=keyName" json:"key_name,omitempty"`
}

func (m *GetDecryptedKeyNodeRequest) Reset()                    { *m = GetDecryptedKeyNodeRequest{} }
func (m *GetDecryptedKeyNodeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDecryptedKeyNodeRequest) ProtoMessage()               {}
func (*GetDecryptedKeyNodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetDecryptedKeyNodeRequest) GetAccountName() string {
	if m != nil {
		return m.AccountName
	}
	return ""
}

func (m *GetDecryptedKeyNodeRequest) GetNodePath() string {
	if m != nil {
		return m.NodePath
	}
	return ""
}

func (m *GetDecryptedKeyNodeRequest) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

// response parameters for method get_decrypted_key_node
type GetDecryptedKeyNodeResponse struct {
	// method result code
	ErrorCode int32 `protobuf:"varint,1,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// text error message
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	// decrypted key node value
	DecryptedKeyValue []byte `protobuf:"bytes,3,opt,name=decrypted_key_value,json=decryptedKeyValue,proto3" json:"decrypted_key_value,omitempty"`
}

func (m *GetDecryptedKeyNodeResponse) Reset()                    { *m = GetDecryptedKeyNodeResponse{} }
func (m *GetDecryptedKeyNodeResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDecryptedKeyNodeResponse) ProtoMessage()               {}
func (*GetDecryptedKeyNodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetDecryptedKeyNodeResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *GetDecryptedKeyNodeResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *GetDecryptedKeyNodeResponse) GetDecryptedKeyValue() []byte {
	if m != nil {
		return m.DecryptedKeyValue
	}
	return nil
}

func init() {
	proto.RegisterType((*TreeNode)(nil), "org.gaterace.mservice.safebox.TreeNode")
	proto.RegisterType((*DataKey)(nil), "org.gaterace.mservice.safebox.DataKey")
	proto.RegisterType((*KeyNode)(nil), "org.gaterace.mservice.safebox.KeyNode")
	proto.RegisterType((*AddSharedSecretRequest)(nil), "org.gaterace.mservice.safebox.AddSharedSecretRequest")
	proto.RegisterType((*AddSharedSecretResponse)(nil), "org.gaterace.mservice.safebox.AddSharedSecretResponse")
	proto.RegisterType((*ClearSharedSecretsRequest)(nil), "org.gaterace.mservice.safebox.ClearSharedSecretsRequest")
	proto.RegisterType((*ClearSharedSecretsResponse)(nil), "org.gaterace.mservice.safebox.ClearSharedSecretsResponse")
	proto.RegisterType((*CreateDataKeyRequest)(nil), "org.gaterace.mservice.safebox.CreateDataKeyRequest")
	proto.RegisterType((*CreateDataKeyResponse)(nil), "org.gaterace.mservice.safebox.CreateDataKeyResponse")
	proto.RegisterType((*DeleteDataKeyRequest)(nil), "org.gaterace.mservice.safebox.DeleteDataKeyRequest")
	proto.RegisterType((*DeleteDataKeyResponse)(nil), "org.gaterace.mservice.safebox.DeleteDataKeyResponse")
	proto.RegisterType((*GetDataKeyRequest)(nil), "org.gaterace.mservice.safebox.GetDataKeyRequest")
	proto.RegisterType((*GetDataKeyResponse)(nil), "org.gaterace.mservice.safebox.GetDataKeyResponse")
	proto.RegisterType((*GetDataKeyByIdRequest)(nil), "org.gaterace.mservice.safebox.GetDataKeyByIdRequest")
	proto.RegisterType((*GetDataKeyByIdResponse)(nil), "org.gaterace.mservice.safebox.GetDataKeyByIdResponse")
	proto.RegisterType((*GetDataKeysByAccountRequest)(nil), "org.gaterace.mservice.safebox.GetDataKeysByAccountRequest")
	proto.RegisterType((*GetDataKeysByAccountResponse)(nil), "org.gaterace.mservice.safebox.GetDataKeysByAccountResponse")
	proto.RegisterType((*GetDecryptedDataKeyRequest)(nil), "org.gaterace.mservice.safebox.GetDecryptedDataKeyRequest")
	proto.RegisterType((*GetDecryptedDataKeyResponse)(nil), "org.gaterace.mservice.safebox.GetDecryptedDataKeyResponse")
	proto.RegisterType((*CreateKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.CreateKeyNodeRequest")
	proto.RegisterType((*CreateKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.CreateKeyNodeResponse")
	proto.RegisterType((*EnableKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.EnableKeyNodeRequest")
	proto.RegisterType((*EnableKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.EnableKeyNodeResponse")
	proto.RegisterType((*DisableKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.DisableKeyNodeRequest")
	proto.RegisterType((*DisableKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.DisableKeyNodeResponse")
	proto.RegisterType((*ReEncryptKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.ReEncryptKeyNodeRequest")
	proto.RegisterType((*ReEncryptKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.ReEncryptKeyNodeResponse")
	proto.RegisterType((*CopyKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.CopyKeyNodeRequest")
	proto.RegisterType((*CopyKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.CopyKeyNodeResponse")
	proto.RegisterType((*DeleteKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.DeleteKeyNodeRequest")
	proto.RegisterType((*DeleteKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.DeleteKeyNodeResponse")
	proto.RegisterType((*GetKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.GetKeyNodeRequest")
	proto.RegisterType((*GetKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.GetKeyNodeResponse")
	proto.RegisterType((*GetKeyNodeByIdRequest)(nil), "org.gaterace.mservice.safebox.GetKeyNodeByIdRequest")
	proto.RegisterType((*GetKeyNodeByIdResponse)(nil), "org.gaterace.mservice.safebox.GetKeyNodeByIdResponse")
	proto.RegisterType((*GetKeyNodeByPathRequest)(nil), "org.gaterace.mservice.safebox.GetKeyNodeByPathRequest")
	proto.RegisterType((*GetKeyNodeByPathResponse)(nil), "org.gaterace.mservice.safebox.GetKeyNodeByPathResponse")
	proto.RegisterType((*GetDecryptedKeyNodeRequest)(nil), "org.gaterace.mservice.safebox.GetDecryptedKeyNodeRequest")
	proto.RegisterType((*GetDecryptedKeyNodeResponse)(nil), "org.gaterace.mservice.safebox.GetDecryptedKeyNodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MServiceSafebox service

type MServiceSafeboxClient interface {
	// initialize service with shared secret
	AddSharedSecret(ctx context.Context, in *AddSharedSecretRequest, opts ...grpc.CallOption) (*AddSharedSecretResponse, error)
	// remocve shared secrets
	ClearSharedSecrets(ctx context.Context, in *ClearSharedSecretsRequest, opts ...grpc.CallOption) (*ClearSharedSecretsResponse, error)
	// create a new data key
	CreateDataKey(ctx context.Context, in *CreateDataKeyRequest, opts ...grpc.CallOption) (*CreateDataKeyResponse, error)
	// delete a data key
	DeleteDataKey(ctx context.Context, in *DeleteDataKeyRequest, opts ...grpc.CallOption) (*DeleteDataKeyResponse, error)
	// get a data key
	GetDataKey(ctx context.Context, in *GetDataKeyRequest, opts ...grpc.CallOption) (*GetDataKeyResponse, error)
	// get a data key by id
	GetDataKeyById(ctx context.Context, in *GetDataKeyByIdRequest, opts ...grpc.CallOption) (*GetDataKeyByIdResponse, error)
	// get a data keys by account_name
	GetDataKeysByAccount(ctx context.Context, in *GetDataKeysByAccountRequest, opts ...grpc.CallOption) (*GetDataKeysByAccountResponse, error)
	// get a decrypted version of data key
	GetDecryptedDataKey(ctx context.Context, in *GetDecryptedDataKeyRequest, opts ...grpc.CallOption) (*GetDecryptedDataKeyResponse, error)
	// create a new key node, encrypting value creating tree node if necessary
	CreateKeyNode(ctx context.Context, in *CreateKeyNodeRequest, opts ...grpc.CallOption) (*CreateKeyNodeResponse, error)
	// enable a key node
	EnableKeyNode(ctx context.Context, in *EnableKeyNodeRequest, opts ...grpc.CallOption) (*EnableKeyNodeResponse, error)
	// disable a key node
	DisableKeyNode(ctx context.Context, in *DisableKeyNodeRequest, opts ...grpc.CallOption) (*DisableKeyNodeResponse, error)
	// re-encrypt a key node
	ReEncryptKeyNode(ctx context.Context, in *ReEncryptKeyNodeRequest, opts ...grpc.CallOption) (*ReEncryptKeyNodeResponse, error)
	// copy a  key node to new path
	CopyKeyNode(ctx context.Context, in *CopyKeyNodeRequest, opts ...grpc.CallOption) (*CopyKeyNodeResponse, error)
	// delete a  key node
	DeleteKeyNode(ctx context.Context, in *DeleteKeyNodeRequest, opts ...grpc.CallOption) (*DeleteKeyNodeResponse, error)
	// get a key node by node and path
	GetKeyNode(ctx context.Context, in *GetKeyNodeRequest, opts ...grpc.CallOption) (*GetKeyNodeResponse, error)
	// get a key node by id
	GetKeyNodeById(ctx context.Context, in *GetKeyNodeByIdRequest, opts ...grpc.CallOption) (*GetKeyNodeByIdResponse, error)
	// get a list of key nodes by path
	GetKeyNodeByPath(ctx context.Context, in *GetKeyNodeByPathRequest, opts ...grpc.CallOption) (*GetKeyNodeByPathResponse, error)
	// get a decrypted version of key node
	GetDecryptedKeyNode(ctx context.Context, in *GetDecryptedKeyNodeRequest, opts ...grpc.CallOption) (*GetDecryptedKeyNodeResponse, error)
}

type mServiceSafeboxClient struct {
	cc *grpc.ClientConn
}

func NewMServiceSafeboxClient(cc *grpc.ClientConn) MServiceSafeboxClient {
	return &mServiceSafeboxClient{cc}
}

func (c *mServiceSafeboxClient) AddSharedSecret(ctx context.Context, in *AddSharedSecretRequest, opts ...grpc.CallOption) (*AddSharedSecretResponse, error) {
	out := new(AddSharedSecretResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/add_shared_secret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) ClearSharedSecrets(ctx context.Context, in *ClearSharedSecretsRequest, opts ...grpc.CallOption) (*ClearSharedSecretsResponse, error) {
	out := new(ClearSharedSecretsResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/clear_shared_secrets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) CreateDataKey(ctx context.Context, in *CreateDataKeyRequest, opts ...grpc.CallOption) (*CreateDataKeyResponse, error) {
	out := new(CreateDataKeyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/create_data_key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) DeleteDataKey(ctx context.Context, in *DeleteDataKeyRequest, opts ...grpc.CallOption) (*DeleteDataKeyResponse, error) {
	out := new(DeleteDataKeyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/delete_data_key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetDataKey(ctx context.Context, in *GetDataKeyRequest, opts ...grpc.CallOption) (*GetDataKeyResponse, error) {
	out := new(GetDataKeyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_data_key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetDataKeyById(ctx context.Context, in *GetDataKeyByIdRequest, opts ...grpc.CallOption) (*GetDataKeyByIdResponse, error) {
	out := new(GetDataKeyByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_data_key_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetDataKeysByAccount(ctx context.Context, in *GetDataKeysByAccountRequest, opts ...grpc.CallOption) (*GetDataKeysByAccountResponse, error) {
	out := new(GetDataKeysByAccountResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_data_keys_by_account", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetDecryptedDataKey(ctx context.Context, in *GetDecryptedDataKeyRequest, opts ...grpc.CallOption) (*GetDecryptedDataKeyResponse, error) {
	out := new(GetDecryptedDataKeyResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_decrypted_data_key", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) CreateKeyNode(ctx context.Context, in *CreateKeyNodeRequest, opts ...grpc.CallOption) (*CreateKeyNodeResponse, error) {
	out := new(CreateKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/create_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) EnableKeyNode(ctx context.Context, in *EnableKeyNodeRequest, opts ...grpc.CallOption) (*EnableKeyNodeResponse, error) {
	out := new(EnableKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/enable_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) DisableKeyNode(ctx context.Context, in *DisableKeyNodeRequest, opts ...grpc.CallOption) (*DisableKeyNodeResponse, error) {
	out := new(DisableKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/disable_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) ReEncryptKeyNode(ctx context.Context, in *ReEncryptKeyNodeRequest, opts ...grpc.CallOption) (*ReEncryptKeyNodeResponse, error) {
	out := new(ReEncryptKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/re_encrypt_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) CopyKeyNode(ctx context.Context, in *CopyKeyNodeRequest, opts ...grpc.CallOption) (*CopyKeyNodeResponse, error) {
	out := new(CopyKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/copy_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) DeleteKeyNode(ctx context.Context, in *DeleteKeyNodeRequest, opts ...grpc.CallOption) (*DeleteKeyNodeResponse, error) {
	out := new(DeleteKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/delete_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetKeyNode(ctx context.Context, in *GetKeyNodeRequest, opts ...grpc.CallOption) (*GetKeyNodeResponse, error) {
	out := new(GetKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetKeyNodeById(ctx context.Context, in *GetKeyNodeByIdRequest, opts ...grpc.CallOption) (*GetKeyNodeByIdResponse, error) {
	out := new(GetKeyNodeByIdResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_key_node_by_id", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetKeyNodeByPath(ctx context.Context, in *GetKeyNodeByPathRequest, opts ...grpc.CallOption) (*GetKeyNodeByPathResponse, error) {
	out := new(GetKeyNodeByPathResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_key_node_by_path", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceSafeboxClient) GetDecryptedKeyNode(ctx context.Context, in *GetDecryptedKeyNodeRequest, opts ...grpc.CallOption) (*GetDecryptedKeyNodeResponse, error) {
	out := new(GetDecryptedKeyNodeResponse)
	err := grpc.Invoke(ctx, "/org.gaterace.mservice.safebox.MServiceSafebox/get_decrypted_key_node", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MServiceSafebox service

type MServiceSafeboxServer interface {
	// initialize service with shared secret
	AddSharedSecret(context.Context, *AddSharedSecretRequest) (*AddSharedSecretResponse, error)
	// remocve shared secrets
	ClearSharedSecrets(context.Context, *ClearSharedSecretsRequest) (*ClearSharedSecretsResponse, error)
	// create a new data key
	CreateDataKey(context.Context, *CreateDataKeyRequest) (*CreateDataKeyResponse, error)
	// delete a data key
	DeleteDataKey(context.Context, *DeleteDataKeyRequest) (*DeleteDataKeyResponse, error)
	// get a data key
	GetDataKey(context.Context, *GetDataKeyRequest) (*GetDataKeyResponse, error)
	// get a data key by id
	GetDataKeyById(context.Context, *GetDataKeyByIdRequest) (*GetDataKeyByIdResponse, error)
	// get a data keys by account_name
	GetDataKeysByAccount(context.Context, *GetDataKeysByAccountRequest) (*GetDataKeysByAccountResponse, error)
	// get a decrypted version of data key
	GetDecryptedDataKey(context.Context, *GetDecryptedDataKeyRequest) (*GetDecryptedDataKeyResponse, error)
	// create a new key node, encrypting value creating tree node if necessary
	CreateKeyNode(context.Context, *CreateKeyNodeRequest) (*CreateKeyNodeResponse, error)
	// enable a key node
	EnableKeyNode(context.Context, *EnableKeyNodeRequest) (*EnableKeyNodeResponse, error)
	// disable a key node
	DisableKeyNode(context.Context, *DisableKeyNodeRequest) (*DisableKeyNodeResponse, error)
	// re-encrypt a key node
	ReEncryptKeyNode(context.Context, *ReEncryptKeyNodeRequest) (*ReEncryptKeyNodeResponse, error)
	// copy a  key node to new path
	CopyKeyNode(context.Context, *CopyKeyNodeRequest) (*CopyKeyNodeResponse, error)
	// delete a  key node
	DeleteKeyNode(context.Context, *DeleteKeyNodeRequest) (*DeleteKeyNodeResponse, error)
	// get a key node by node and path
	GetKeyNode(context.Context, *GetKeyNodeRequest) (*GetKeyNodeResponse, error)
	// get a key node by id
	GetKeyNodeById(context.Context, *GetKeyNodeByIdRequest) (*GetKeyNodeByIdResponse, error)
	// get a list of key nodes by path
	GetKeyNodeByPath(context.Context, *GetKeyNodeByPathRequest) (*GetKeyNodeByPathResponse, error)
	// get a decrypted version of key node
	GetDecryptedKeyNode(context.Context, *GetDecryptedKeyNodeRequest) (*GetDecryptedKeyNodeResponse, error)
}

func RegisterMServiceSafeboxServer(s *grpc.Server, srv MServiceSafeboxServer) {
	s.RegisterService(&_MServiceSafebox_serviceDesc, srv)
}

func _MServiceSafebox_AddSharedSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSharedSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).AddSharedSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/AddSharedSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).AddSharedSecret(ctx, req.(*AddSharedSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_ClearSharedSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearSharedSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).ClearSharedSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/ClearSharedSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).ClearSharedSecrets(ctx, req.(*ClearSharedSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_CreateDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).CreateDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/CreateDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).CreateDataKey(ctx, req.(*CreateDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_DeleteDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).DeleteDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/DeleteDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).DeleteDataKey(ctx, req.(*DeleteDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetDataKey(ctx, req.(*GetDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetDataKeyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataKeyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetDataKeyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetDataKeyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetDataKeyById(ctx, req.(*GetDataKeyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetDataKeysByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDataKeysByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetDataKeysByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetDataKeysByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetDataKeysByAccount(ctx, req.(*GetDataKeysByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetDecryptedDataKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecryptedDataKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetDecryptedDataKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetDecryptedDataKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetDecryptedDataKey(ctx, req.(*GetDecryptedDataKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_CreateKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).CreateKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/CreateKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).CreateKeyNode(ctx, req.(*CreateKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_EnableKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).EnableKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/EnableKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).EnableKeyNode(ctx, req.(*EnableKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_DisableKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisableKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).DisableKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/DisableKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).DisableKeyNode(ctx, req.(*DisableKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_ReEncryptKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReEncryptKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).ReEncryptKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/ReEncryptKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).ReEncryptKeyNode(ctx, req.(*ReEncryptKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_CopyKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).CopyKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/CopyKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).CopyKeyNode(ctx, req.(*CopyKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_DeleteKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).DeleteKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/DeleteKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).DeleteKeyNode(ctx, req.(*DeleteKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetKeyNode(ctx, req.(*GetKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetKeyNodeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyNodeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetKeyNodeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetKeyNodeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetKeyNodeById(ctx, req.(*GetKeyNodeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetKeyNodeByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyNodeByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetKeyNodeByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetKeyNodeByPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetKeyNodeByPath(ctx, req.(*GetKeyNodeByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceSafebox_GetDecryptedKeyNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecryptedKeyNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceSafeboxServer).GetDecryptedKeyNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.safebox.MServiceSafebox/GetDecryptedKeyNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceSafeboxServer).GetDecryptedKeyNode(ctx, req.(*GetDecryptedKeyNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MServiceSafebox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.safebox.MServiceSafebox",
	HandlerType: (*MServiceSafeboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "add_shared_secret",
			Handler:    _MServiceSafebox_AddSharedSecret_Handler,
		},
		{
			MethodName: "clear_shared_secrets",
			Handler:    _MServiceSafebox_ClearSharedSecrets_Handler,
		},
		{
			MethodName: "create_data_key",
			Handler:    _MServiceSafebox_CreateDataKey_Handler,
		},
		{
			MethodName: "delete_data_key",
			Handler:    _MServiceSafebox_DeleteDataKey_Handler,
		},
		{
			MethodName: "get_data_key",
			Handler:    _MServiceSafebox_GetDataKey_Handler,
		},
		{
			MethodName: "get_data_key_by_id",
			Handler:    _MServiceSafebox_GetDataKeyById_Handler,
		},
		{
			MethodName: "get_data_keys_by_account",
			Handler:    _MServiceSafebox_GetDataKeysByAccount_Handler,
		},
		{
			MethodName: "get_decrypted_data_key",
			Handler:    _MServiceSafebox_GetDecryptedDataKey_Handler,
		},
		{
			MethodName: "create_key_node",
			Handler:    _MServiceSafebox_CreateKeyNode_Handler,
		},
		{
			MethodName: "enable_key_node",
			Handler:    _MServiceSafebox_EnableKeyNode_Handler,
		},
		{
			MethodName: "disable_key_node",
			Handler:    _MServiceSafebox_DisableKeyNode_Handler,
		},
		{
			MethodName: "re_encrypt_key_node",
			Handler:    _MServiceSafebox_ReEncryptKeyNode_Handler,
		},
		{
			MethodName: "copy_key_node",
			Handler:    _MServiceSafebox_CopyKeyNode_Handler,
		},
		{
			MethodName: "delete_key_node",
			Handler:    _MServiceSafebox_DeleteKeyNode_Handler,
		},
		{
			MethodName: "get_key_node",
			Handler:    _MServiceSafebox_GetKeyNode_Handler,
		},
		{
			MethodName: "get_key_node_by_id",
			Handler:    _MServiceSafebox_GetKeyNodeById_Handler,
		},
		{
			MethodName: "get_key_node_by_path",
			Handler:    _MServiceSafebox_GetKeyNodeByPath_Handler,
		},
		{
			MethodName: "get_decrypted_key_node",
			Handler:    _MServiceSafebox_GetDecryptedKeyNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceSafebox.proto",
}

func init() { proto.RegisterFile("MServiceSafebox.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0xdb, 0x8b, 0x1b, 0xd5,
	0x1f, 0xe7, 0x24, 0xbb, 0x9b, 0xe4, 0x9b, 0xe4, 0xb7, 0xed, 0x69, 0xb2, 0x3b, 0x9d, 0xfe, 0xaa,
	0x71, 0x0a, 0x36, 0x82, 0x84, 0x5e, 0xd5, 0x56, 0x85, 0x76, 0x37, 0x45, 0x4a, 0x69, 0xa9, 0xd9,
	0x22, 0x58, 0x90, 0x38, 0x3b, 0xe7, 0x74, 0x1b, 0x73, 0x99, 0x38, 0x33, 0xbb, 0x36, 0x50, 0x10,
	0x05, 0xf5, 0x41, 0xa5, 0x88, 0x88, 0xe8, 0x83, 0x0f, 0x3e, 0xf8, 0x20, 0xfe, 0x35, 0xfe, 0x2b,
	0x82, 0xcf, 0x72, 0xce, 0x99, 0xeb, 0x99, 0xc9, 0xce, 0xcc, 0x92, 0x0d, 0xd5, 0xc7, 0x9c, 0xf9,
	0xde, 0x6f, 0xe7, 0xf3, 0x3d, 0x81, 0xe6, 0xdd, 0x1d, 0x6a, 0x1d, 0x0c, 0x0c, 0xba, 0xa3, 0x3f,
	0xa2, 0xbb, 0xe6, 0x93, 0xce, 0xd4, 0x32, 0x1d, 0x13, 0x9f, 0x35, 0xad, 0xbd, 0xce, 0x9e, 0xee,
	0x50, 0x4b, 0x37, 0x68, 0x67, 0x6c, 0x0b, 0x9a, 0x8e, 0x2d, 0x88, 0x54, 0xdc, 0x1d, 0x8f, 0x6e,
	0x3d, 0x71, 0xe8, 0xc4, 0x1e, 0x98, 0x13, 0xc1, 0xa2, 0xfd, 0x54, 0x80, 0xf2, 0x03, 0x8b, 0xd2,
	0x7b, 0x26, 0xa1, 0x78, 0x13, 0x4a, 0x13, 0x93, 0xd0, 0xfe, 0x80, 0x28, 0xa8, 0x85, 0xda, 0xc5,
	0xde, 0x1a, 0xfb, 0x79, 0x9b, 0xe0, 0xf3, 0x50, 0x32, 0x2c, 0xaa, 0x3b, 0x94, 0x28, 0x85, 0x16,
	0x6a, 0x57, 0x2f, 0xd5, 0x3b, 0x64, 0x3c, 0xea, 0x74, 0x75, 0x87, 0x3e, 0x18, 0x8c, 0x69, 0xcf,
	0xfb, 0x8a, 0x5f, 0x81, 0xf2, 0xd8, 0x24, 0x83, 0x47, 0x03, 0x4a, 0x94, 0x62, 0x12, 0xa5, 0xff,
	0x99, 0xc9, 0x24, 0x74, 0x44, 0x99, 0xcc, 0x95, 0x44, 0x99, 0xee, 0x57, 0x7c, 0x16, 0x60, 0x60,
	0xf7, 0x3d, 0xda, 0xd5, 0x16, 0x6a, 0x97, 0x7b, 0x95, 0x81, 0xdd, 0x75, 0x3f, 0x2b, 0x50, 0x3a,
	0xa0, 0x16, 0x73, 0x49, 0x59, 0x6b, 0xa1, 0xf6, 0x6a, 0xcf, 0xfb, 0x89, 0x5f, 0x82, 0x9a, 0x6e,
	0x18, 0xe6, 0xfe, 0xc4, 0xe9, 0x4f, 0xf4, 0x31, 0x55, 0x4a, 0x2d, 0xd4, 0xae, 0xf4, 0xaa, 0xee,
	0xd9, 0x3d, 0x7d, 0x4c, 0xf1, 0x19, 0xa8, 0x70, 0x8f, 0xa7, 0xba, 0xf3, 0x58, 0x29, 0xf3, 0xef,
	0x65, 0x76, 0x70, 0x5f, 0x77, 0x1e, 0x6b, 0x7f, 0x15, 0xa0, 0xd4, 0xd5, 0x1d, 0xfd, 0x0e, 0x9d,
	0xe1, 0x17, 0xa0, 0x4a, 0x74, 0x47, 0xef, 0x0f, 0xe9, 0x2c, 0x08, 0x4f, 0x85, 0x88, 0xaf, 0xff,
	0xe5, 0x08, 0x69, 0x50, 0xf7, 0x1d, 0xe7, 0x34, 0x22, 0x4a, 0x55, 0xd7, 0x75, 0x4e, 0x73, 0x01,
	0x1a, 0x3e, 0x0d, 0xa1, 0xb6, 0x61, 0x0d, 0xa6, 0x0e, 0xd3, 0x56, 0xe1, 0xa4, 0xd8, 0x25, 0xed,
	0x06, 0x5f, 0xf0, 0x69, 0x28, 0x7b, 0x1c, 0x0a, 0xb4, 0x50, 0xbb, 0xd6, 0x2b, 0xb9, 0x54, 0xda,
	0x1f, 0x45, 0x28, 0x31, 0xc1, 0xac, 0x20, 0x9b, 0xb0, 0x16, 0x09, 0xf8, 0xea, 0xf0, 0x5f, 0x1c,
	0xec, 0x50, 0x77, 0x95, 0x22, 0xdd, 0x25, 0xd5, 0x56, 0x59, 0xae, 0x2d, 0xa1, 0x91, 0x4e, 0xf4,
	0xdd, 0x11, 0x25, 0x3c, 0xa8, 0x5c, 0xe3, 0x2d, 0x71, 0xc0, 0x62, 0xe9, 0x27, 0x07, 0x78, 0xc4,
	0x4b, 0x43, 0x37, 0x31, 0xe7, 0x61, 0x5d, 0xce, 0x49, 0x95, 0x53, 0xfc, 0x6f, 0x18, 0xcd, 0xc7,
	0x19, 0xa8, 0x30, 0xc2, 0x03, 0x7d, 0xb4, 0x4f, 0x95, 0x1a, 0x4f, 0x08, 0x13, 0xfa, 0x1e, 0xfb,
	0x1d, 0x6d, 0x92, 0xba, 0xd4, 0x24, 0x6f, 0xc3, 0xc6, 0x4d, 0x42, 0x76, 0x1e, 0xeb, 0x16, 0x25,
	0x3b, 0xd4, 0xb0, 0xa8, 0xd3, 0xa3, 0x1f, 0xef, 0x53, 0xdb, 0xc1, 0xe7, 0xa0, 0x6e, 0xf3, 0xe3,
	0xbe, 0xcd, 0xcf, 0x79, 0x0e, 0x2b, 0xbd, 0x9a, 0x1d, 0xa2, 0xd5, 0x3e, 0x80, 0xcd, 0x18, 0xbb,
	0x3d, 0x35, 0x27, 0x36, 0x65, 0x6e, 0x53, 0xcb, 0x32, 0xad, 0xbe, 0x61, 0x12, 0xca, 0x99, 0x57,
	0x7b, 0x15, 0x7e, 0xb2, 0xcd, 0x6a, 0xe3, 0x1c, 0xd4, 0xc5, 0xe7, 0x31, 0xb5, 0x6d, 0x7d, 0x8f,
	0xf2, 0x52, 0xa8, 0xf4, 0x6a, 0xfc, 0xf0, 0xae, 0x38, 0xd3, 0xde, 0x82, 0xd3, 0xdb, 0x23, 0xaa,
	0x5b, 0x61, 0x05, 0xb6, 0x67, 0xe0, 0x8b, 0x50, 0x25, 0xfb, 0xe3, 0xf1, 0xac, 0x3f, 0xd5, 0x2d,
	0x7d, 0xec, 0x6a, 0x00, 0x7e, 0x74, 0x9f, 0x9d, 0x68, 0x1f, 0x82, 0x9a, 0xc4, 0xbd, 0x40, 0xfb,
	0x9e, 0x21, 0x68, 0x6c, 0xf3, 0x62, 0x75, 0x07, 0x8d, 0x67, 0x9b, 0xdc, 0x99, 0x28, 0x43, 0x67,
	0x16, 0xb2, 0x77, 0x66, 0x71, 0x5e, 0x67, 0x6a, 0x3f, 0x20, 0x68, 0x4a, 0x16, 0x2d, 0xce, 0xdf,
	0x70, 0x77, 0x14, 0xa3, 0xdd, 0x21, 0x35, 0xc1, 0x8a, 0xd4, 0x04, 0x9a, 0x0d, 0x0d, 0xd1, 0x62,
	0xf9, 0x03, 0x25, 0x89, 0x2e, 0xc8, 0xfd, 0x35, 0xd7, 0x28, 0x6d, 0x1f, 0x9a, 0x92, 0xd2, 0x65,
	0xc4, 0x42, 0x7b, 0x08, 0x27, 0xdf, 0xa1, 0xce, 0xb1, 0x54, 0x84, 0xf6, 0x33, 0x02, 0x1c, 0x16,
	0xbe, 0x40, 0x87, 0x6e, 0x00, 0x1f, 0xe2, 0x6c, 0xa6, 0x8b, 0x61, 0xfb, 0x72, 0xe7, 0x50, 0x40,
	0xd2, 0xf1, 0x8c, 0xf0, 0xd8, 0xb4, 0x87, 0xd0, 0x0c, 0x6c, 0xdb, 0x9a, 0xdd, 0x26, 0x8b, 0xcb,
	0xb2, 0xf6, 0x0b, 0x82, 0x0d, 0x59, 0xf8, 0x73, 0xe5, 0xfc, 0x0d, 0x38, 0x13, 0xd8, 0x67, 0x6f,
	0xcd, 0x6e, 0x0a, 0xe7, 0xb2, 0x87, 0x40, 0xfb, 0x0d, 0xc1, 0xff, 0x93, 0x45, 0x2c, 0xd0, 0xd1,
	0x2d, 0x71, 0x75, 0x0f, 0xe9, 0xcc, 0x56, 0x8a, 0xad, 0x62, 0x0e, 0x4f, 0x7d, 0x3e, 0xcd, 0x00,
	0x95, 0xd9, 0x49, 0x0d, 0x6b, 0x36, 0x75, 0x28, 0x39, 0x9e, 0x4a, 0x7f, 0x86, 0x44, 0x40, 0x63,
	0x5a, 0x16, 0x18, 0x8c, 0x57, 0x01, 0x13, 0x4f, 0x7e, 0xdf, 0x47, 0x34, 0x45, 0x7e, 0x81, 0x9e,
	0x20, 0x92, 0x66, 0xed, 0x6f, 0x7f, 0xda, 0xbb, 0x00, 0x27, 0x87, 0xc7, 0x91, 0x4b, 0xb8, 0x10,
	0xbd, 0x84, 0xe5, 0xda, 0x2f, 0x1e, 0x8e, 0x20, 0x56, 0x0e, 0x43, 0x10, 0xab, 0xa9, 0x08, 0x62,
	0x2d, 0x1d, 0x41, 0x94, 0xa2, 0x08, 0x42, 0xfb, 0xc6, 0xbf, 0x54, 0x7c, 0xc7, 0x97, 0x72, 0xa9,
	0x04, 0xf8, 0x71, 0x25, 0x84, 0x1f, 0xb5, 0x8f, 0xa0, 0x21, 0x5c, 0xcf, 0x9f, 0x86, 0x40, 0x62,
	0x21, 0x8c, 0x48, 0x0f, 0xbd, 0x42, 0x24, 0x5d, 0x4b, 0xb9, 0x42, 0x86, 0xd0, 0xec, 0x0e, 0xec,
	0x25, 0xf9, 0x78, 0x00, 0x1b, 0xb2, 0xb2, 0xa5, 0x38, 0xf9, 0x2d, 0x82, 0xcd, 0x1e, 0xbd, 0x35,
	0xe1, 0x6d, 0x76, 0xfc, 0x7e, 0xa6, 0x62, 0x94, 0x27, 0xa0, 0xc4, 0xcd, 0x59, 0x4a, 0x24, 0xbe,
	0x40, 0x80, 0xb7, 0xcd, 0xe9, 0x6c, 0x09, 0x41, 0x88, 0x0c, 0xa2, 0x15, 0x69, 0x1b, 0xf8, 0x11,
	0xc1, 0xa9, 0x88, 0x1d, 0x4b, 0x69, 0x73, 0x0d, 0xea, 0x86, 0x39, 0x1d, 0x50, 0x12, 0xcd, 0x4c,
	0x55, 0x1c, 0xde, 0xf1, 0x7a, 0x5e, 0x40, 0xb9, 0xe5, 0xf4, 0xbc, 0xa4, 0x6b, 0x29, 0x45, 0x30,
	0xe1, 0xb0, 0x71, 0xc1, 0x57, 0x4b, 0xf8, 0x6e, 0x28, 0x46, 0xee, 0x06, 0x0f, 0x4a, 0x1e, 0x87,
	0x93, 0x37, 0x80, 0x69, 0x61, 0x46, 0x64, 0x44, 0x53, 0x9e, 0x11, 0x1e, 0x9b, 0xf6, 0x2e, 0x87,
	0x92, 0xee, 0x71, 0x4e, 0x28, 0x99, 0x9c, 0x70, 0x0f, 0x41, 0x46, 0x64, 0x3e, 0x57, 0x3e, 0xbf,
	0x0f, 0x9b, 0x61, 0xfb, 0x58, 0xfe, 0x16, 0x54, 0x06, 0xda, 0xaf, 0x08, 0x94, 0xb8, 0xec, 0xc5,
	0xc2, 0x4a, 0xd7, 0x8d, 0xac, 0xb0, 0xd2, 0x73, 0xdf, 0xe7, 0xd3, 0x3e, 0x89, 0xc2, 0xca, 0xe5,
	0x75, 0xc2, 0x77, 0x12, 0xd4, 0x3c, 0x8e, 0x96, 0xe8, 0xc0, 0xa9, 0x00, 0x6a, 0x06, 0x50, 0x4b,
	0x60, 0xcd, 0x93, 0x24, 0xa4, 0x9a, 0x63, 0xae, 0x4b, 0x7f, 0x62, 0x58, 0x97, 0x9e, 0x89, 0xf1,
	0xe7, 0x08, 0x4e, 0xea, 0x84, 0xf4, 0x23, 0xef, 0x32, 0xf8, 0x6a, 0x4a, 0xa0, 0x93, 0xdf, 0x77,
	0xd4, 0xd7, 0xf2, 0xb2, 0xb9, 0xc1, 0xf8, 0x1a, 0x41, 0xc3, 0x18, 0x51, 0xdd, 0x8a, 0x9a, 0x61,
	0xe3, 0x37, 0x52, 0x04, 0xce, 0x7d, 0xc9, 0x51, 0xaf, 0x1d, 0x81, 0xd3, 0xb5, 0xe6, 0x29, 0xac,
	0x8b, 0xd7, 0x42, 0x1f, 0xbe, 0xe3, 0xcb, 0x69, 0xd2, 0x12, 0x1e, 0x6c, 0xd4, 0x2b, 0xf9, 0x98,
	0x02, 0xed, 0xe2, 0x25, 0x31, 0xbb, 0xf6, 0xa4, 0x57, 0x90, 0x54, 0xed, 0xc9, 0xaf, 0x18, 0x36,
	0xd4, 0xf6, 0xa8, 0x13, 0xa8, 0xbe, 0x90, 0x22, 0x25, 0xf6, 0x28, 0xa1, 0x5e, 0xcc, 0xc1, 0xe1,
	0x2a, 0xfd, 0x0c, 0x01, 0x0e, 0x6b, 0xed, 0xef, 0xb2, 0x49, 0x8b, 0xaf, 0x64, 0x96, 0x14, 0x1a,
	0xe6, 0xea, 0xd5, 0x9c, 0x5c, 0xae, 0x0d, 0xdf, 0x23, 0x50, 0xc2, 0x36, 0xd8, 0xcc, 0x08, 0x77,
	0x10, 0xe0, 0xeb, 0x99, 0x65, 0xc6, 0x96, 0x74, 0xf5, 0xcd, 0x23, 0xf1, 0xba, 0x56, 0x3d, 0x43,
	0xb0, 0xc1, 0xad, 0x8a, 0x6d, 0x94, 0xf8, 0x5a, 0x06, 0xb9, 0xc9, 0xdb, 0xb4, 0x7a, 0xfd, 0x28,
	0xac, 0xb1, 0xe6, 0xe0, 0x93, 0x8f, 0xcd, 0xaa, 0x6c, 0xcd, 0x11, 0x1d, 0xbd, 0x19, 0x9b, 0x43,
	0x9e, 0x9a, 0x4f, 0x61, 0x5d, 0xac, 0xac, 0xd9, 0xb5, 0x27, 0xad, 0x75, 0xa9, 0xda, 0x93, 0xf7,
	0xb3, 0x4f, 0xe1, 0x04, 0x11, 0x4b, 0x4d, 0xa0, 0x3e, 0xb5, 0xcd, 0x92, 0x56, 0xae, 0xd4, 0x22,
	0x9d, 0xb3, 0x3b, 0x7d, 0x89, 0xe0, 0x94, 0x45, 0xfb, 0x54, 0xec, 0x13, 0x81, 0x11, 0x69, 0x73,
	0x77, 0xce, 0x46, 0xa4, 0xbe, 0x9e, 0x9b, 0xcf, 0x35, 0xe4, 0x80, 0xc3, 0xeb, 0x59, 0x60, 0x41,
	0x5a, 0xd7, 0xc7, 0x37, 0x11, 0xf5, 0x52, 0x1e, 0x96, 0xd8, 0x70, 0xcc, 0x9c, 0xff, 0x24, 0x88,
	0x9f, 0x71, 0x38, 0xca, 0xda, 0xdd, 0xe1, 0xe8, 0xab, 0xce, 0x30, 0x1c, 0x25, 0xbd, 0x17, 0x73,
	0x70, 0x48, 0xc3, 0xd1, 0xd3, 0x9a, 0x7d, 0x38, 0xc6, 0x91, 0x6e, 0x96, 0xe1, 0x98, 0x84, 0x65,
	0xbf, 0x42, 0xd0, 0x90, 0x6d, 0x60, 0x80, 0x28, 0xb5, 0xf0, 0xe6, 0x60, 0xcf, 0xd4, 0xc2, 0x9b,
	0x8b, 0x2b, 0xe3, 0x03, 0xd1, 0xcf, 0x46, 0x9e, 0x81, 0x28, 0xa5, 0xe5, 0xfa, 0x51, 0x58, 0x85,
	0x45, 0x5b, 0xe7, 0x1e, 0xae, 0x7b, 0xf4, 0x2e, 0xf9, 0xef, 0x05, 0x19, 0x65, 0xed, 0xae, 0xf1,
	0xbf, 0xd6, 0x2f, 0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0x97, 0xfe, 0x24, 0xc1, 0xa6, 0x1f, 0x00,
	0x00,
}
